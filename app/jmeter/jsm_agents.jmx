<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="application.hostname" elementType="Argument">
            <stringProp name="Argument.name">application.hostname</stringProp>
            <stringProp name="Argument.value">${__lowercase(${__P(application_hostname, test_jsm_instance.atlassian.com)})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="application.port" elementType="Argument">
            <stringProp name="Argument.name">application.port</stringProp>
            <stringProp name="Argument.value">${__P(application_port, 80)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="application.protocol" elementType="Argument">
            <stringProp name="Argument.name">application.protocol</stringProp>
            <stringProp name="Argument.value">${__P(application_protocol, http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="application.postfix" elementType="Argument">
            <stringProp name="Argument.name">application.postfix</stringProp>
            <stringProp name="Argument.value">${__P(application_postfix, )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="insight" elementType="Argument">
            <stringProp name="Argument.name">insight</stringProp>
            <stringProp name="Argument.value">${__P(insight, )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <intProp name="HTTPSampler.concurrentPool">6</intProp>
        <stringProp name="HTTPSampler.embedded_url_re">(?i).*${application.hostname}.*</stringProp>
        <intProp name="HTTPSampler.connect_timeout">20000</intProp>
        <stringProp name="HTTPSampler.domain">${application.hostname}</stringProp>
        <stringProp name="HTTPSampler.port">${application.port}</stringProp>
        <stringProp name="HTTPSampler.protocol">${application.protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path">${application.postfix}</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">${application.protocol}://${application.hostname}:${application.port}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Agents" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">0</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="users" enabled="true">
          <stringProp name="filename">datasets/jsm/agents.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">username,password</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="load profile" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="total_actions_per_hour_agents" elementType="Argument">
              <stringProp name="Argument.name">total_actions_per_hour_agents</stringProp>
              <stringProp name="Argument.value">${__P(total_actions_per_hour_agents, 13500)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_browse_projects" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_browse_projects</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_browse_projects, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_request" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_request</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_request, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_add_comment" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_add_comment</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_add_comment, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_queues_small" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_queues_small</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_queues_small, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_queues_medium" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_queues_medium</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_queues_medium, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_report_workload_small" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_report_workload_small</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_report_workload_small, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_report_workload_medium" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_report_workload_medium</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_report_workload_medium, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_report_created_vs_resolved_small" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_report_created_vs_resolved_small</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_report_created_vs_resolved_small, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_report_created_vs_resolved_medium" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_report_created_vs_resolved_medium</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_report_created_vs_resolved_medium, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_view_customers" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_view_customers</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_view_customers, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_standalone_extension" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_standalone_extension</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_standalone_extension, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_insight_main_page" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_insight_main_page</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_insight_main_page, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_insight_create_schema" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_insight_create_schema</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_insight_create_schema, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_insight_create_object" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_insight_create_object</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_insight_create_object, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_insight_delete_schema" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_insight_delete_schema</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_insight_delete_schema, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_insight_view_queue_insight_column" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_insight_view_queue_insight_column</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_insight_view_queue_insight_column, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_insight_view_issue_with_objects" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_insight_view_issue_with_objects</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_insight_view_issue_with_objects, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_agent_insight_search_object_by_iql" elementType="Argument">
              <stringProp name="Argument.name">perc_agent_insight_search_object_by_iql</stringProp>
              <stringProp name="Argument.value">${__P(perc_agent_insight_search_object_by_iql, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_login_and_view_dashboard" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="100 /login.jsp" enabled="true">
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${application.postfix}/login.jsp</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="os_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_username</stringProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="os_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_password</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="os_destination" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_destination</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="user_role" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">user_role</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="atl_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">atl_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">login</stringProp>
                  <stringProp name="Argument.value">Log In</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="105 /" enabled="true">
            <stringProp name="HTTPSampler.path">${application.postfix}/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="c_AtlToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">c_AtlToken</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;atlassian-token&quot; content=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="store c_AtlToken for logout" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

def atl_token = vars.get(&quot;c_AtlToken&quot;).toString()
def user_counter = vars.get(&quot;user_counter&quot;).toString()

JMeterUtils.setProperty(&quot;c_AtlToken&quot; + user_counter, atl_token)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1948182085">title=&quot;loggedInUser&quot; value=&quot;${username}&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="login checker" enabled="true">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}==false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
            <intProp name="ActionProcessor.action">5</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="actions per login" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="s_projects" enabled="true">
            <stringProp name="filename">datasets/jsm/service_desks_small.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">s_service_desk_id,s_prj_id,s_prj_key,s_prj_total_req,s_prj_all_open_queue_id,s_created_vs_resolved_id,s_time_to_resolution_id</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">true</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="m_projects" enabled="true">
            <stringProp name="filename">datasets/jsm/service_desks_medium.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">m_service_desk_id,m_prj_id,m_prj_key,m_prj_total_req,m_prj_all_open_queue_id,m_created_vs_resolved_id,m_time_to_resolution_id</stringProp>
            <boolProp name="randomOrder">false</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">true</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="insight_issues" enabled="true">
            <stringProp name="filename">datasets/jsm/insight_issues.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">insight_issue_key,insight_issue_id,insight_issue_name</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">true</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="requests" enabled="true">
            <stringProp name="filename">datasets/jsm/requests.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">request_id,request_key,request_service_desk_id,request_project_Id,request_project_key</stringProp>
            <boolProp name="randomOrder">true</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="small project actions" enabled="true"/>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_queues_small" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <stringProp name="ThroughputController.percentThroughput">${__jexl2(${perc_agent_view_queues_small} / 2)}</stringProp>
            </ThroughputController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_queues_small:all_open_queue" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="200 /projects/${s_prj_key}/queues/custom/${s_prj_all_open_queue_id}" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/projects/${s_prj_key}/queues/custom/${s_prj_all_open_queue_id}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="212 /rest/projects/1.0/project/${s_prj_key}/lastVisited" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${s_prj_key}/lastVisited</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-queues&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="216 /rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${s_prj_key}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get_random_queue_id" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">s_random_queue_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..items[?(@.params.count != &apos;0&apos; &amp;&amp; @.label != &apos;All open&apos;)].key</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">None</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="224 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/page" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/page</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="228 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/queues-limit" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/queues-limit</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="232 /rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="asc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">asc</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="startIndex" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">startIndex</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="columnNames" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">columnNames</stringProp>
                        <stringProp name="Argument.value">duedate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="jql" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">jql</stringProp>
                        <stringProp name="Argument.value">project = ${s_prj_key} AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="issuesPerPage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">issuesPerPage</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="orderBy" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">orderBy</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="244 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="projectStateHash" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">projectStateHash</stringProp>
                        <stringProp name="Argument.value">undefined</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="246 /rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${s_prj_key}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="248 /rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist/updated" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist/updated</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="asc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">asc</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentIssueHash" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentIssueHash</stringProp>
                        <stringProp name="Argument.value">f28505024e00a8d3cc3a408bffacba4d44803233</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="startIndex" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">startIndex</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="columnNames" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">columnNames</stringProp>
                        <stringProp name="Argument.value">duedate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="jql" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">jql</stringProp>
                        <stringProp name="Argument.value">project = ${s_prj_key} AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="issuesPerPage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">issuesPerPage</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="orderBy" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">orderBy</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_queues_small:random_queue" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="410 /projects/${s_prj_key}/queues/custom/${s_random_queue_id}" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/projects/${s_prj_key}/queues/custom/${s_random_queue_id}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="420 /rest/projects/1.0/project/${s_prj_key}/lastVisited" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${s_prj_key}/lastVisited</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-queues&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="424 /rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${s_prj_key}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="432 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/page" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/page</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="436 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/queues-limit" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/queues-limit</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="440 /rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="asc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">asc</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="startIndex" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">startIndex</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="columnNames" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">columnNames</stringProp>
                        <stringProp name="Argument.value">duedate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="jql" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">jql</stringProp>
                        <stringProp name="Argument.value">project = ${s_prj_key} AND assignee = currentUser() AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="issuesPerPage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">issuesPerPage</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="orderBy" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">orderBy</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="452 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="projectStateHash" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">projectStateHash</stringProp>
                        <stringProp name="Argument.value">undefined</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="454 /rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${s_prj_key}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="456 rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist/updated" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/issuelist/updated</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="asc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">asc</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentIssueHash" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentIssueHash</stringProp>
                        <stringProp name="Argument.value">480feb93c9da5ccd477743b9433cb00aecb3806c</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="startIndex" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">startIndex</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="columnNames" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">columnNames</stringProp>
                        <stringProp name="Argument.value">duedate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="jql" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">jql</stringProp>
                        <stringProp name="Argument.value">project = ${s_prj_key} AND assignee = currentUser() AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="issuesPerPage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">issuesPerPage</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="orderBy" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">orderBy</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="462 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="projectStateHash" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">projectStateHash</stringProp>
                        <stringProp name="Argument.value">-172134395</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="466 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/poll</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="projectStateHash" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">projectStateHash</stringProp>
                        <stringProp name="Argument.value">-172134395</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_view_queues_small action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Timer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_report_workload_small" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <stringProp name="ThroughputController.percentThroughput">${perc_agent_view_report_workload_small}</stringProp>
            </ThroughputController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_report_workload_small" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="322 /projects/${s_prj_key}/reports/workload" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/projects/${s_prj_key}/reports/workload</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="326 /rest/servicedesk/1/servicedesk/${s_prj_key}/precondition" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/precondition</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="328 /rest/servicedesk/1/servicedesk/${s_prj_key}/warnings" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/warnings</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="336 /rest/projects/1.0/project/${s_prj_key}/lastVisited" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${s_prj_key}/lastVisited</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-reports&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="340 /rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${s_prj_key}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="346 /rest/servicedesk/1/pages/people/agents/${s_prj_key}/search" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/pages/people/agents/${s_prj_key}/search</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="query" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-AUSERNAME" elementType="Header">
                        <stringProp name="Header.name">X-AUSERNAME</stringProp>
                        <stringProp name="Header.value">performance_agent_0_abvsufypvdlqoez</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_view_report_workload_small action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Timer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_report_created_vs_resolved_small" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <stringProp name="ThroughputController.percentThroughput">${perc_agent_view_report_created_vs_resolved_small}</stringProp>
            </ThroughputController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_report_created_vs_resolved_small" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="380 /projects/${s_prj_key}/reports/custom/${s_created_vs_resolved_id}/timescale/2" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/projects/${s_prj_key}/reports/custom/${s_created_vs_resolved_id}/timescale/2</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="390 /rest/projects/1.0/project/${s_prj_key}/lastVisited" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${s_prj_key}/lastVisited</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-reports&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="394 /rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${s_prj_key}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="400 /rest/servicedesk/reports/1/servicedesk/${s_prj_key}/report/${s_created_vs_resolved_id}" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/reports/1/servicedesk/${s_prj_key}/report/${s_created_vs_resolved_id}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="timescaleId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">timescaleId</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_view_report_created_vs_resolved_small action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223Timer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="medium project actions" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If medium projects size exist" enabled="true">
              <stringProp name="IfController.condition">${__isVarDefined(m_service_desk_id)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_queues_medium" enabled="true">
                <intProp name="ThroughputController.style">1</intProp>
                <boolProp name="ThroughputController.perThread">false</boolProp>
                <intProp name="ThroughputController.maxThroughput">1</intProp>
                <stringProp name="ThroughputController.percentThroughput">${__jexl2(${perc_agent_view_queues_medium} / 2)}</stringProp>
              </ThroughputController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_queues_medium:all_open_queue" enabled="true">
                  <boolProp name="TransactionController.parent">true</boolProp>
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="490 /projects/${m_prj_key}/queues/custom/${m_prj_all_open_queue_id}" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/projects/${m_prj_key}/queues/custom/${m_prj_all_open_queue_id}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">0.0</stringProp>
                      <stringProp name="ConstantTimer.delay">0</stringProp>
                      <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="502 /rest/projects/1.0/project/${m_prj_key}/lastVisited" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${m_prj_key}/lastVisited</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-queues&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="506 /rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${m_prj_key}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get_random_queue_id" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">m_random_queue_id</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..items[?(@.params.count != &apos;0&apos; &amp;&amp; @.label != &apos;All open&apos;)].key</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">None</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="514 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/page" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/page</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="518 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/queues-limit" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/queues-limit</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="522 /rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="asc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">asc</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="startIndex" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">startIndex</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="columnNames" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">columnNames</stringProp>
                          <stringProp name="Argument.value">duedate</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="jql" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">jql</stringProp>
                          <stringProp name="Argument.value">project = ${m_prj_key} AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="issuesPerPage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">issuesPerPage</stringProp>
                          <stringProp name="Argument.value">50</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="orderBy" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">orderBy</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="534 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="projectStateHash" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">projectStateHash</stringProp>
                          <stringProp name="Argument.value">undefined</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="536 /rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist/updated" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist/updated</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="asc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">asc</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="currentIssueHash" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">currentIssueHash</stringProp>
                          <stringProp name="Argument.value">f28505024e00a8d3cc3a408bffacba4d44803233</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="startIndex" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">startIndex</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="columnNames" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">columnNames</stringProp>
                          <stringProp name="Argument.value">duedate</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="jql" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">jql</stringProp>
                          <stringProp name="Argument.value">project = ${m_prj_key} AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="issuesPerPage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">issuesPerPage</stringProp>
                          <stringProp name="Argument.value">50</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="orderBy" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">orderBy</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_queues_medium:random_queue" enabled="true">
                  <boolProp name="TransactionController.parent">true</boolProp>
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="542 /projects/${m_prj_key}/queues/custom/${m_random_queue_id}" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/projects/${m_prj_key}/queues/custom/${m_random_queue_id}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="552 /rest/projects/1.0/project/${m_prj_key}/lastVisited" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${m_prj_key}/lastVisited</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-queues&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="556 /rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${m_prj_key}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="564 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/page" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/page</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="568 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/queues-limit" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/queues-limit</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="572 /rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="asc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">asc</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="startIndex" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">startIndex</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="columnNames" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">columnNames</stringProp>
                          <stringProp name="Argument.value">duedate</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="jql" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">jql</stringProp>
                          <stringProp name="Argument.value">project = ${m_prj_key} AND assignee = currentUser() AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="issuesPerPage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">issuesPerPage</stringProp>
                          <stringProp name="Argument.value">50</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="orderBy" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">orderBy</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="584 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="projectStateHash" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">projectStateHash</stringProp>
                          <stringProp name="Argument.value">undefined</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="586 /rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${m_prj_key}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="588 rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist/updated" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/issuelist/updated</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="asc" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">asc</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="excludeLinkedToMajorIncidents" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">excludeLinkedToMajorIncidents</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="currentIssueHash" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">currentIssueHash</stringProp>
                          <stringProp name="Argument.value">480feb93c9da5ccd477743b9433cb00aecb3806c</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="startIndex" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">startIndex</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="columnNames" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">columnNames</stringProp>
                          <stringProp name="Argument.value">duedate</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="jql" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">jql</stringProp>
                          <stringProp name="Argument.value">project = ${m_prj_key} AND assignee = currentUser() AND resolution = Unresolved ORDER BY &quot;Time to resolution&quot; ASC</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="issuesPerPage" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">issuesPerPage</stringProp>
                          <stringProp name="Argument.value">50</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="orderBy" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">orderBy</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="594 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="projectStateHash" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">projectStateHash</stringProp>
                          <stringProp name="Argument.value">-172134395</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="600 /rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/queues/poll</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="projectStateHash" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">projectStateHash</stringProp>
                          <stringProp name="Argument.value">-172134395</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_view_queues_medium action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Timer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_report_created_vs_resolved_medium" enabled="true">
                <intProp name="ThroughputController.style">1</intProp>
                <boolProp name="ThroughputController.perThread">false</boolProp>
                <intProp name="ThroughputController.maxThroughput">1</intProp>
                <stringProp name="ThroughputController.percentThroughput">${perc_agent_view_report_created_vs_resolved_medium}</stringProp>
              </ThroughputController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_report_created_vs_resolved_medium" enabled="true">
                  <boolProp name="TransactionController.parent">true</boolProp>
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="634 /projects/${m_prj_key}/reports/custom/${m_created_vs_resolved_id}/timescale/2" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/projects/${m_prj_key}/reports/custom/${m_created_vs_resolved_id}/timescale/2</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="644 /rest/projects/1.0/project/${m_prj_key}/lastVisited" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${m_prj_key}/lastVisited</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-reports&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="650 /rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${m_prj_key}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="656 /rest/servicedesk/reports/1/servicedesk/${m_prj_key}/report/${m_created_vs_resolved_id}" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/reports/1/servicedesk/${m_prj_key}/report/${m_created_vs_resolved_id}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="timescaleId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">timescaleId</stringProp>
                          <stringProp name="Argument.value">2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_view_report_created_vs_resolved_medium action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Timer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_report_workload_medium" enabled="true">
                <intProp name="ThroughputController.style">1</intProp>
                <boolProp name="ThroughputController.perThread">false</boolProp>
                <intProp name="ThroughputController.maxThroughput">1</intProp>
                <stringProp name="ThroughputController.percentThroughput">${perc_agent_view_report_workload_medium}</stringProp>
              </ThroughputController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_report_workload_medium" enabled="true">
                  <boolProp name="TransactionController.parent">true</boolProp>
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="604 /projects/${m_prj_key}/reports/workload" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/projects/${m_prj_key}/reports/workload</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">0.0</stringProp>
                      <stringProp name="ConstantTimer.delay">0</stringProp>
                      <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="608 /rest/servicedesk/1/servicedesk/${m_prj_key}/precondition" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/precondition</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="610 /rest/servicedesk/1/servicedesk/${m_prj_key}/warnings" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${m_prj_key}/warnings</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="620 /rest/projects/1.0/project/${m_prj_key}/lastVisited" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${m_prj_key}/lastVisited</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-reports&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="624 /rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${m_prj_key}/webfragments/sections/sd-reports-nav,servicedesk.agent.reports,servicedesk.agent.reports.ungrouped,sd-reports-nav-custom-section</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${m_prj_key}&quot;}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="630 /rest/servicedesk/1/pages/people/agents/${m_prj_key}/search" enabled="true">
                    <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/pages/people/agents/${m_prj_key}/search</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="query" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">query</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="_" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">_</stringProp>
                          <stringProp name="Argument.value">${__time(,)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="X-AUSERNAME" elementType="Header">
                          <stringProp name="Header.name">X-AUSERNAME</stringProp>
                          <stringProp name="Header.value">performance_agent_0_abvsufypvdlqoez</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223Timer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_browse_projects" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_browse_projects}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_browse_projects" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="270 /secure/BrowseProjects.jspa" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/secure/BrowseProjects.jspa</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="selectedCategory" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">selectedCategory</stringProp>
                      <stringProp name="Argument.value">all</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="selectedProjectType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">selectedProjectType</stringProp>
                      <stringProp name="Argument.value">service_desk</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">0.0</stringProp>
                  <stringProp name="ConstantTimer.delay">0</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_browse_projects action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_request" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_view_request}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_request" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="280 /browse/${request_key}" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/browse/${request_key}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_view_request action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_add_comment" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_add_comment}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_add_comment:open_request_comment" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="300 /rest/servicedesk/canned-responses/1/search/${request_project_key}" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/canned-responses/1/search/${request_project_key}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="issueKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">issueKey</stringProp>
                      <stringProp name="Argument.value">${request_key}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limitUsagesToUser" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limitUsagesToUser</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">5</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="daysSince" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">daysSince</stringProp>
                      <stringProp name="Argument.value">30</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="substitute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">substitute</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                      <stringProp name="Argument.value">${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="302 /rest/servicedesk/canned-responses/1/search/${request_project_key}" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/canned-responses/1/search/${request_project_key}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="issueKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">issueKey</stringProp>
                      <stringProp name="Argument.value">${request_key}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">5</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="substitute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">substitute</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                      <stringProp name="Argument.value">${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_add_comment:save_request_comment" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="308 /rest/api/2/issue/${request_id}/comment" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/api/2/issue/${request_id}/comment</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;body&quot;:&quot;${g_comment}&quot;,&quot;properties&quot;:[{&quot;key&quot;:&quot;sd.public.comment&quot;,&quot;value&quot;:{&quot;internal&quot;:true}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="comment_generator" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def generator = { String alphabet, int n -&gt;
    new Random().with {
        (1..n).collect { alphabet[nextInt(alphabet.length())] }.join()
    }
}

def comment = &quot;JMeter comment - &quot; + generator(((&apos;a&apos;..&apos;z&apos;) + &apos; &apos; * 10).join(), 50);


vars.put(&quot;g_comment&quot;, comment.toString())
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="310 /secure/AjaxIssueAction!default.jspa" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/secure/AjaxIssueAction!default.jspa</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="decorator" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">decorator</stringProp>
                      <stringProp name="Argument.value">none</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="issueKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">issueKey</stringProp>
                      <stringProp name="Argument.value">${request_key}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="shouldUpdateCurrentProject" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">shouldUpdateCurrentProject</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="issue" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">issue</stringProp>
                      <stringProp name="Argument.value">summary:2af6db370a27a7174ec5cc130b175675</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="panels" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">panels</stringProp>
                      <stringProp name="Argument.value">com.atlassian.jira.jira-view-issue-plugin:details-module:f1c1c1a9537dd1b7ff56d49e86b12fcf,com.atlassian.jira.jira-view-issue-plugin:descriptionmodule:3b53cb5e6c64ff432caea6cc4c1eec9c,com.atlassian.jira.plugins.jira-dnd-attachment-plugin:dnd-metadata:4c75a4fa7c03a8a472bdbf16701325da,com.atlassian.jira.jira-view-issue-plugin:attachmentmodule:413cb3dde9c12bf621fa91dc18217a83,com.atlassian.jira.jira-view-issue-plugin:activitymodule:143883405dd1aedf4b588595a4818653,com.atlassian.jira.plugin.system.comment-panel:addcommentmodule:d054e04d4e1dd579b99c3b77578dbbb2,com.atlassian.servicedesk.frontend-webpack-plugin:sla-web-panel:fed80d3c79d9c6aa1c10e5cafb881e09,com.atlassian.jira.jira-view-issue-plugin:peoplemodule:82ea29fd747a593088f1cee985b707b0,com.atlassian.servicedesk.frontend-webpack-plugin:customer-request-details-web-panel:5a7b1c9303fac1355a8086e425ccfbec,com.atlassian.jira.jira-view-issue-plugin:datesmodule:2a6758eb0663dfbc2e6c2dcafa84d975</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="lastReadTime" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">lastReadTime</stringProp>
                      <stringProp name="Argument.value">1610383830502</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="prefetch" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">prefetch</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="links" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">links</stringProp>
                      <stringProp name="Argument.value">comment-issue:ab8f97979b557fb0365b58b1cb37a93c,view-voters:ccc9788623b3ea836e9a3d596e8831a3,toggle-unwatch-issue:bc3f9c03fef7163cede5b25c666884a1,manage-watchers:c23ae6252e1cac145bdf3ba78023656c,issue-to-subtask:342cb7fc1bbf007c99e13506b7bc8577,create-linked-issue:318ddb47cb4348d9b51f53166482340a,move-issue:e5bd6c0a6968cc7f88cebb8dacec959a,link-issue:cd537ade9a8594fbe0c18b1c24000e30,clone-issue:1e3903f4c14fc737c5419a43dc7ca7a0,delete-issue:35e6a42c31aad6b3b11a0b0dbf4eb7e9,jira-share-trigger:0c5d26a364e768fa1ec9608107213ffd,jira.issueviews:issue-xml:5375421ab68ea4125eee01ffc61adf61,jira.issueviews:issue-word:ded7d768c301e2c9d9b0f6476983bc09,jira.issueviews:issue-html:24b86be7f795ad8c0938cc20c29d1b4b</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="X-SITEMESH-OFF" elementType="Header">
                      <stringProp name="Header.name">X-SITEMESH-OFF</stringProp>
                      <stringProp name="Header.value">true</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="316 /rest/servicedesk/canned-responses/1/search/${request_project_key}" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/canned-responses/1/search/${request_project_key}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="issueKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">issueKey</stringProp>
                      <stringProp name="Argument.value">${request_key}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limitUsagesToUser" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limitUsagesToUser</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">5</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="daysSince" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">daysSince</stringProp>
                      <stringProp name="Argument.value">30</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="substitute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">substitute</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                      <stringProp name="Argument.value">${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="318 /rest/servicedesk/canned-responses/1/search/${request_project_key}" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/canned-responses/1/search/${request_project_key}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="issueKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">issueKey</stringProp>
                      <stringProp name="Argument.value">${request_key}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                      <stringProp name="Argument.value">5</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="substitute" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">substitute</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                      <stringProp name="Argument.value">${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_comment action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_view_customers" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_view_customers}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_view_customers" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="470 /projects/${s_prj_key}/customers" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/projects/${s_prj_key}/customers</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">0.0</stringProp>
                  <stringProp name="ConstantTimer.delay">0</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="482 /rest/projects/1.0/project/${s_prj_key}/lastVisited" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${s_prj_key}/lastVisited</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-customers&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="484 /rest/servicedesk/1/pages/people/customers/pagination/${s_prj_key}" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/pages/people/customers/pagination/${s_prj_key}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="486 /rest/servicedesk/1/pages/people/customers/pagination/${s_prj_key}/search" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/pages/people/customers/pagination/${s_prj_key}/search</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="query" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="X-AUSERNAME" elementType="Header">
                      <stringProp name="Header.name">X-AUSERNAME</stringProp>
                      <stringProp name="Header.value">performance_agent_0_abjmievxknktqdz</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_view_customers action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="agent_standalone_extension" enabled="true">
            <stringProp name="IfController.condition"></stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="login_as_specific_user" enabled="false"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="username:password" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="app_specific_username" elementType="Argument">
                    <stringProp name="Argument.name">app_specific_username</stringProp>
                    <stringProp name="Argument.value">admin</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="app_specific_password" elementType="Argument">
                    <stringProp name="Argument.name">app_specific_password</stringProp>
                    <stringProp name="Argument.value">admin</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_as_specific_user" enabled="true">
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/login.jsp</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="os_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_username</stringProp>
                      <stringProp name="Argument.value">${app_specific_username}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_password</stringProp>
                      <stringProp name="Argument.value">${app_specific_password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_destination" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_destination</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="user_role" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">user_role</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="atl_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">atl_token</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="login" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">login</stringProp>
                      <stringProp name="Argument.value">Log In</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ignore_request_result_from_view" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put(&quot;run_as_specific_user&quot;, &quot;true&quot;)
prev.setIgnore()</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_logged_in_as_specific_user" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/api/2/myself</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check_current_user" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper;

def slurper = new JsonSlurper()
response_data = slurper.parseText(prev.getResponseDataAsString())

if (response_data.name != vars.get(&quot;app_specific_username&quot;)) {
	prev.setSuccessful(false)
	prev.setResponseMessage(&quot;Login Failed: Your app_specific_username: &apos;&quot; + vars.get(&quot;app_specific_username&quot;) + &quot;&apos; or password is incorrect. Also, check the CAPTCHA for &apos;&quot; + vars.get(&quot;app_specific_username&quot;) + &quot;&apos; user.&quot;)
	prev.setTestLogicalAction(org.apache.jmeter.threads.JMeterContext.TestLogicalAction.BREAK_CURRENT_LOOP)     
} else {
	prev.setIgnore()
}
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_app_specific_action" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /app/get_endpoing" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/app/get_endpoint</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="app_id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">app_id</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="app_token" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">app_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assertion after GET request" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="261585815">asserttion string</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /app/post_endpoing" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/app/post_endpoint</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${app_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">id</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${app_token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">token</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assertion after POST request" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-787535121">assertion string</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="login_as_default_user_if_specific_user_was_loggedin " enabled="true">
              <stringProp name="IfController.condition">${run_as_specific_user}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_as_default_user" enabled="true">
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/login.jsp</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="os_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_username</stringProp>
                      <stringProp name="Argument.value">${username}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_password</stringProp>
                      <stringProp name="Argument.value">${password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_destination" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_destination</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="user_role" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">user_role</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="atl_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">atl_token</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="login" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">login</stringProp>
                      <stringProp name="Argument.value">Log In</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ignore_request_result_from_view" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">prev.setIgnore()</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_logged_in_as_default_user" enabled="true">
                <stringProp name="HTTPSampler.path">${application.postfix}/rest/api/2/myself</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="check_current_user" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper;

def slurper = new JsonSlurper()
response_data = slurper.parseText(prev.getResponseDataAsString())

if (response_data.name != vars.get(&quot;username&quot;)) {
	prev.setSuccessful(false)
	prev.setResponseMessage(&quot;Re-login Failed: username: &apos;&quot; + vars.get(&quot;username&quot;) + &quot;&apos; failed to login. Check the CAPTCHA for &apos;&quot; + vars.get(&quot;username&quot;) + &quot;&apos; user.&quot;)
	prev.setTestLogicalAction(org.apache.jmeter.threads.JMeterContext.TestLogicalAction.BREAK_CURRENT_LOOP)                        
} else {
	prev.setIgnore()
}


</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_standalone_extension action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_insight_main_page" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_insight_main_page}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Insight check" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${insight}&quot; == &quot;True&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">Check if Insight enabled</stringProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_main_page" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="487 /rest/api/1.0/menus/rlabs_insight_topmenu_link" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/api/1.0/menus/rlabs_insight_topmenu_link</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="inAdminMode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inAdminMode</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648197601161</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-AUSERNAME" elementType="Header">
                        <stringProp name="Header.name">X-AUSERNAME</stringProp>
                        <stringProp name="Header.value">admin</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="488 /secure/ManageObjectSchema.jspa" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/secure/ManageObjectSchema.jspa</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="492/rest/insight/1.0/objectschema/list" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschema/list</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648197623432</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_insight_main_page action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_insight_create_schema" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_insight_create_schema}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Insight check" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${insight}&quot; == &quot;True&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">Check if Insight enabled</stringProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_create_schema:open_field" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="494 /rest/insight/1.0/objectschema/create/default" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschema/create/default</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648197623438</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_create_schema:create_schema" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="495/rest/insight/1.0/objectschema/template" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschemaimport/template</stringProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;status&quot;:&quot;Ok&quot;,&quot;name&quot;:&quot;${__RandomString(5,abcdefg)}&quot;,&quot;objectSchemaKey&quot;:&quot;${__RandomString(5,abcdefg)}&quot;,&quot;type&quot;:&quot;itasset&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="schema_id" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">schema_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NOT FOUND</stringProp>
                    <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_create_object" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="496/secure/ObjectSchema.jspa?id=${schema_id}" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/secure/ObjectSchema.jspa</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">id</stringProp>
                        <stringProp name="Argument.value">${schema_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="499/rest/insight/1.0/global/config/object?objectschemaid=${schema_id}&amp;_=1648553559435" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/global/config/object</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="objectschemaid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objectschemaid</stringProp>
                        <stringProp name="Argument.value">${schema_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559435</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="501/rest/insight/1.0/objectschema" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschema/${schema_id}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559436</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="503/rest/insight/1.0/objectschema/${schema_id}/jstree" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschema/${schema_id}/jstree</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="objectTypeId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objectTypeId</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559438</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="x_object_type_Id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">object_type_id</stringProp>
                    <stringProp name="RegexExtractor.regex">rlabs_jstree_(.+?)\&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="504/rest/insight/1.0/progress/category/insight-reindex/inprogress?_=1648553559437" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/progress/category/insight-reindex/inprogress</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559437</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="505/rest/insight/1.0/objecttype/${object_type_id}/details" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objecttype/${object_type_id}/details</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559439</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="507/rest/insight/1.0/importsource/ot/${object_type_id}/imports" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/importsource/ot/${object_type_id}/imports</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559440</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="510/rest/insight/1.0/objectschema/${schema_id}/objecttypes" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschema/${schema_id}/objecttypes</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="excludeAbstract" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">excludeAbstract</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559442</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="511/rest/insight/1.0/global/config/objectschema/${schema_id}/property" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/global/config/objectschema/${schema_id}/property</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559443</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="512/rest/insight/1.0/objecttype/${object_type_id}/attributes" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objecttype/${object_type_id}/attributes</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="onlyValueEditable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">onlyValueEditable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559444</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="attribute_id" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">attribute_id</stringProp>
                    <stringProp name="RegexExtractor.regex">id\&quot;:(.+?)\,&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="513/rest/insight/1.0/object/create" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/object/create</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;objectTypeId&quot;: ${object_type_id} ,&quot;attributes&quot;: [{&quot;objectTypeAttributeId&quot;: ${attribute_id},&quot;objectAttributeValues&quot;: [{&quot;value&quot;: &quot;Hello&quot;}]}]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="514/rest/insight/1.0/object/navlist" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/object/navlist</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;objectTypeId&quot;:&quot;${object_type_id}&quot;,&quot;filters&quot;:[],&quot;attributesToDisplay&quot;:{&quot;attributesToDisplayIds&quot;:[]},&quot;page&quot;:1,&quot;asc&quot;:1,&quot;resultsPerPage&quot;:25,&quot;includeAttributes&quot;:false,&quot;objectSchemaId&quot;:&quot;${schema_id}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="515/rest/insight/1.0/objecttype/${object_type_id}/details" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objecttype/${object_type_id}/details</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559445</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="516/rest/insight/1.0/objecttype/${object_type_id}/attributes" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objecttype/${object_type_id}/attributes</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="includeChildren" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">includeChildren</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648553559446</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_delete_schema" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="517/secure/ManageObjectSchema.jspa" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/secure/ManageObjectSchema.jspa</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="520/rest/insight/1.0/global/config" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/global/config</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648201234009</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="522/rest/insight/1.0/objectschema/list" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschema/list</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">1648201234011</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="X-Insight-Gadget" elementType="Header">
                        <stringProp name="Header.name">X-Insight-Gadget</stringProp>
                        <stringProp name="Header.value">false</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="525/rest/insight/1.0/objectschema/${schema_id}" enabled="true">
                  <intProp name="HTTPSampler.response_timeout">1000</intProp>
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight/1.0/objectschema/${schema_id}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="X-Atlassian-Token" elementType="Header">
                        <stringProp name="Header.name">X-Atlassian-Token</stringProp>
                        <stringProp name="Header.value">no-check</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore response from that action" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="TestPlan.comments">We are saving around 9s for this action for do not wait till it finished</stringProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_insight_create_schema action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_insight_view_queue_insight_column" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_insight_view_queue_insight_column}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Insight check" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${insight}&quot; == &quot;True&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">Check if Insight enabled</stringProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_view_queue_insight_column" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="526 /projects/${s_prj_key}/queues/custom/${s_prj_all_open_queue_id}" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/projects/${s_prj_key}/queues/custom/${s_prj_all_open_queue_id}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="532 /rest/projects/1.0/project/${s_prj_key}/lastVisited" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/project/${s_prj_key}/lastVisited</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;com.atlassian.servicedesk.project-ui:sd-project-sidebar-queues&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="533 /rest/projects/1.0/subnav/sd-queues-nav" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/subnav/sd-queues-nav</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="534 /rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/${s_prj_key}/webfragments/sections/sd-queues-nav,servicedesk.agent.queues,servicedesk.agent.queues.ungrouped</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;projectKey&quot;:&quot;${s_prj_key}&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get_random_queue_id" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">m_random_queue_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..items[?(@.params.count != &apos;0&apos; &amp;&amp; @.label != &apos;All open&apos;)].key</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">None</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="535 /rest/projects/1.0/subnav/sd-queues-nav/pin" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/projects/1.0/subnav/sd-queues-nav/pin</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="538 /rest/servicedesk/1/servicedesk/${s_prj_key}/queues/page" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/servicedesk/1/servicedesk/${s_prj_key}/queues/page</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="_" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">_</stringProp>
                        <stringProp name="Argument.value">${__time(,)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Insight Column" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-673066120">Insight</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message">There is NO Insight column in this project</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_insight_view_queue_insight_column action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_insight_view_issue_with_objects" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_insight_view_issue_with_objects}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Insight check" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${insight}&quot; == &quot;True&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">Check if Insight enabled</stringProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_view_issue_with_objects" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="539/browse/${insight_issue_key}" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/browse/${insight_issue_key}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Insight custom field check" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1344430022">rowForcustomfield</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message">There is no insight custom field present</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_insight_view_issue_with_objects action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="agent_insight_search_object_by_iql" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_agent_insight_search_object_by_iql}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Insight check" enabled="true">
              <stringProp name="IfController.condition">${__groovy(&quot;${insight}&quot; == &quot;True&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">Check if Insight enabled</stringProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_agent_insight_search_object_by_iql" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="543/secure/insight/search" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/secure/insight/search</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">0.0</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="545/rest/insight-am/1/user/configuration" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/user/configuration</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="547/rest/insight-am/1/configuration/schemas" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/configuration/schemas</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="548/rest/insight-am/1/search/attributes" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/search/attributes</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="schema" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">schema</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="limit" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">limit</stringProp>
                        <stringProp name="Argument.value">2000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="549/rest/insight-am/1/objecttypes" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/objecttypes</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="schema" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">schema</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="550/rest/insight-am/1/filters" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/filters</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="schema" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">schema</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="552/rest/insight-am/1/configuration/schemas/recents" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/configuration/schemas/recents</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="562/rest/insight-am/1/iql/autocomplete" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/iql/autocomplete</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="schema" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">schema</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="iql" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">iql</stringProp>
                        <stringProp name="Argument.value">Name NOT LIKE 100</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cursorpos" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cursorpos</stringProp>
                        <stringProp name="Argument.value">17</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="563/rest/insight-am/1/iql/validate" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/iql/validate</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;iql&quot;:&quot;Name NOT LIKE 100&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="564/rest/insight-am/1/search" enabled="true">
                  <stringProp name="HTTPSampler.path">${application.postfix}/rest/insight-am/1/search</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="schema" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">schema</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="offset" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">offset</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="criteria" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">criteria</stringProp>
                        <stringProp name="Argument.value">Name NOT LIKE 100</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="limit" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">limit</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="attributes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">attributes</stringProp>
                        <stringProp name="Argument.value">Key,Object Type,Label</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="criteriaType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">criteriaType</stringProp>
                        <stringProp name="Argument.value">IQL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                      </elementProp>
                      <elementProp name="X-Add-To-Recent-Filter" elementType="Header">
                        <stringProp name="Header.name">X-Add-To-Recent-Filter</stringProp>
                        <stringProp name="Header.value">null</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Attributes of objects check" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="405645655">attributes</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message">There is no objects found</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hour_agents&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int
def action_time = delay_between_transactions - sleep_time as int

log.info(&quot;concurrency: &quot; + &quot;concurrency,&quot; + &quot;total_actions_per_hour: &quot; + vars.get(&quot;total_actions_per_hour_agents&quot;) + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time + &quot;, jmeter_agent_insight_search_object_by_iql action_time: &quot; + action_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="debug sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
