<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="application.hostname" elementType="Argument">
            <stringProp name="Argument.name">application.hostname</stringProp>
            <stringProp name="Argument.value">${__lowercase(${__P(application_hostname, your_bamboo_instance)})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="application.port" elementType="Argument">
            <stringProp name="Argument.name">application.port</stringProp>
            <stringProp name="Argument.value">${__P(application_port, 8085)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="application.protocol" elementType="Argument">
            <stringProp name="Argument.name">application.protocol</stringProp>
            <stringProp name="Argument.value">${__P(application_protocol, http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="application.postfix" elementType="Argument">
            <stringProp name="Argument.name">application.postfix</stringProp>
            <stringProp name="Argument.value">${__P(application_postfix, )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${application.hostname}</stringProp>
        <stringProp name="HTTPSampler.port">${application.port}</stringProp>
        <stringProp name="HTTPSampler.protocol">${application.protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path">${application.postfix}</stringProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.embedded_url_re">(?i).*${application.hostname}.*</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">20000</stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Origin</stringProp>
            <stringProp name="Header.value">${application.protocol}://${application.hostname}:${application.port}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Bamboo" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <stringProp name="ThreadGroup.start_time"></stringProp>
        <stringProp name="ThreadGroup.end_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="users" enabled="true">
          <stringProp name="filename">datasets/bamboo/users.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">username,password</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="load profile" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="total_actions_per_hr" elementType="Argument">
              <stringProp name="Argument.name">total_actions_per_hr</stringProp>
              <stringProp name="Argument.value">${__P(total_actions_per_hr, 10000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_view_all_builds" elementType="Argument">
              <stringProp name="Argument.name">perc_view_all_builds</stringProp>
              <stringProp name="Argument.value">${__P(perc_view_all_builds, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_view_build_result" elementType="Argument">
              <stringProp name="Argument.name">perc_view_build_result</stringProp>
              <stringProp name="Argument.value">${__P(perc_view_build_result, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_view_build_configuration" elementType="Argument">
              <stringProp name="Argument.name">perc_view_build_configuration</stringProp>
              <stringProp name="Argument.value">${__P(perc_view_build_configuration, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_view_job_configuration" elementType="Argument">
              <stringProp name="Argument.name">perc_view_job_configuration</stringProp>
              <stringProp name="Argument.value">${__P(perc_view_job_configuration, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_view_build_summary" elementType="Argument">
              <stringProp name="Argument.name">perc_view_build_summary</stringProp>
              <stringProp name="Argument.value">${__P(perc_view_build_summary, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_view_projects_list" elementType="Argument">
              <stringProp name="Argument.name">perc_view_projects_list</stringProp>
              <stringProp name="Argument.value">${__P(perc_view_projects_list, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perc_standalone_extension" elementType="Argument">
              <stringProp name="Argument.name">perc_standalone_extension</stringProp>
              <stringProp name="Argument.value">${__P(perc_standalone_extension, 0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_login_and_view_all_builds" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="95 /userlogin!doDefault.action" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${application.postfix}/userlogin!doDefault.action</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en,ru;q=0.9,en-US;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2013538399">Log in</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="100 /userlogin.action" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="os_username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_username</stringProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="os_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_password</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="os_destination" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">os_destination</stringProp>
                  <stringProp name="Argument.value">/allPlans.action</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="atl_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">atl_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="save" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Log in</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">save</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${application.postfix}/userlogin.action</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">User login action</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="50549">302</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="login checker" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(!${JMeterThread.last_sample_ok},)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">Check if login action is success</stringProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="break loop if login unsuccessful" enabled="true">
            <intProp name="ActionProcessor.action">5</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="actions per login" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="build_plans" enabled="true">
            <stringProp name="filename">datasets/bamboo/build_plans.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="variableNames">project_id,build_id</stringProp>
            <boolProp name="randomOrder">false</boolProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="rewindOnTheEndOfList">true</boolProp>
            <boolProp name="independentListPerThread">false</boolProp>
          </com.blazemeter.jmeter.RandomCSVDataSetConfig>
          <hashTree/>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="view_all_builds" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_view_all_builds}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_view_all_builds:open_all_builds_page" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="105 /allPlans.action" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/allPlans.action</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message">Build dashboard</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hr&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + concurrency + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="view_build_summary" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_view_build_summary}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_view_build_summary:view_build_summary_results" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="110 /browse/build" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/browse/${build_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message">Plan summary</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hr&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + concurrency + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="view_build_result" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_view_build_result}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_view_build_result:view_build_result" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="115 /latest" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/browse/${build_id}/latest</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message">${build_id}</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Exctract job_id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">job_id</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;li id=&quot;job-${build_id}-(.+?)-</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">log.info(&quot;PARSING JOB_ID for user ${username}, build_id ${build_id}, job_id ${job_id}&quot;)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if job id exists" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;job_id&quot;) != &quot;NOT_FOUND&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">log.info(&quot; ${username}, build_id ${build_id}, job_id ${job_id}&quot;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_view_build_result:view_job_result" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="120 /browse/job" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${application.postfix}/browse/${build_id}-${job_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings"/>
                    <stringProp name="Assertion.custom_message">Job summary</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">log.info(&quot;Job_id: ${job_id} for user ${username}&quot;)
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hr&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + concurrency + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="view_build_configuration" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_view_build_configuration}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_view_build_configuration:open_edit_build_page" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="125 /editConfig" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/browse/${build_id}/editConfig</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message">302</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="130 /defaultStages.action" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/chain/admin/config/defaultStages.action?buildKey=${build_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message">Edit plan configuration</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Exctract job_id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">job_id</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;li id=&quot;job-${build_id}-(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hr&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + concurrency + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="view_job_configuration" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_view_job_configuration}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_view_job_configuration:open_edit_job_page" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="135 /editBuildTasks.action" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/build/admin/edit/editBuildTasks.action?buildKey=${build_id}-${job_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message">Edit job configuration</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hr&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + concurrency + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="view_projects_list" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_view_projects_list}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_projects_list:open_all_projects_page" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="140 /allPlans.action" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/allProjects.action</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message">Projects</stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hr&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + concurrency + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="standalone_extension" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${perc_standalone_extension}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - start" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Calculate loop start time" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;loop_start_time&quot;,String.valueOf(System.currentTimeMillis()));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="login_as_specific_user" enabled="false"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="username:password" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="app_specific_username" elementType="Argument">
                    <stringProp name="Argument.name">app_specific_username</stringProp>
                    <stringProp name="Argument.value">admin</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="app_specific_password" elementType="Argument">
                    <stringProp name="Argument.name">app_specific_password</stringProp>
                    <stringProp name="Argument.value">admin</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_as_specific_user" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="os_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_username</stringProp>
                      <stringProp name="Argument.value">${app_specific_username}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_password</stringProp>
                      <stringProp name="Argument.value">${app_specific_password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_destination" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">os_destination</stringProp>
                      <stringProp name="Argument.value">/allPlans.action</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="atl_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">atl_token</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="save" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">save</stringProp>
                      <stringProp name="Argument.value">Log In</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/userlogin.action</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ignore_request_result_from_view" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">vars.put(&quot;run_as_specific_user&quot;, &quot;true&quot;)
prev.setIgnore()</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_logged_in_as_specific_user" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/profile/userProfile.action</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract logged in username" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">actual_username</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;span id=&quot;currentUser_name&quot; class=&quot;field-value&quot;&gt;(.+?)&lt;/span&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ignore_request_result_from_view" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">actual_username = vars.get(&apos;actual_username&apos;)
app_specific_username = vars.get(&quot;app_specific_username&quot;)
if (actual_username != app_specific_username) {
	prev.setSuccessful(false)
	prev.setResponseMessage(&quot;Login Failed: Your app_specific_username: &apos;&quot; + vars.get(&quot;app_specific_username&quot;) + &quot;&apos; or password is incorrect. Also, check the CAPTCHA for &apos;&quot; + vars.get(&quot;app_specific_username&quot;) + &quot;&apos; user.&quot;)
	prev.setTestLogicalAction(org.apache.jmeter.threads.JMeterContext.TestLogicalAction.BREAK_CURRENT_LOOP)   
} else {
	prev.setIgnore()
}
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_app_specific_action" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /app/get_endpoing" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/app/get_endpoint</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="app_id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">app_id</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="app_token" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">app_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assertion after GET request" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="261585815">asserttion string</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /app/post_endpoing" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${app_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">id</stringProp>
                    </elementProp>
                    <elementProp name="token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${app_token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">token</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/app/post_endpoint</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="assertion after POST request" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-787535121">assertion string</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="login_as_default_user_if_specific_user_was_loggedin " enabled="true">
              <stringProp name="IfController.condition">${run_as_specific_user}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login_as_default_user" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="os_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_username</stringProp>
                      <stringProp name="Argument.value">${username}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">os_password</stringProp>
                      <stringProp name="Argument.value">${password}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="os_destination" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">os_destination</stringProp>
                      <stringProp name="Argument.value">/allPlans.action</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="atl_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">atl_token</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="save" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">save</stringProp>
                      <stringProp name="Argument.value">Log In</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/userlogin.action</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ignore_request_result_from_view" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">prev.setIgnore()</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_logged_in_as_default_user" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${application.postfix}/profile/userProfile.action</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extract logged in username" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">actual_username</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;span id=&quot;currentUser_name&quot; class=&quot;field-value&quot;&gt;(.+?)&lt;/span&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ignore_request_result_from_view" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">actual_username = vars.get(&apos;actual_username&apos;)
default_username = vars.get(&quot;username&quot;)
if (actual_username != default_username) {
	prev.setSuccessful(false)
	prev.setResponseMessage(&quot;Login Failed: Your app_specific_username: &apos;&quot; + vars.get(&quot;username&quot;) + &quot;&apos; or password is incorrect. Also, check the CAPTCHA for &apos;&quot; + vars.get(&quot;username&quot;) + &quot;&apos; user.&quot;)
	prev.setTestLogicalAction(org.apache.jmeter.threads.JMeterContext.TestLogicalAction.BREAK_CURRENT_LOOP)   
} else {
	prev.setIgnore()
}
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="pacing - end" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="pacing timer" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// concurrency
def concurrency = ctx.getThreadGroup().getNumThreads()

// Delays between each action in milli-seconds
def delay_between_transactions = (1000 * 3600) / (vars.get(&quot;total_actions_per_hr&quot;).toDouble() / concurrency.toDouble())

//Sets the pacing length based on the last requests response time. x is the time in ms
def start_time = Long.valueOf(vars.get(&quot;loop_start_time&quot;))
def sleep_time = (delay_between_transactions - (System.currentTimeMillis() - start_time)) as int

log.info(&quot;concurrency: &quot; + concurrency + &quot;, delay_between_transactions: &quot; + delay_between_transactions + &quot;, thread_sleep: &quot; + sleep_time)

if ( sleep_time &gt; 0 ) {
    return sleep_time
} else {
    return 0
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="debug sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
